;;; .rmcsrc --- rmcs runtime config -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; Commentary:
;;; Code:
(require 'rmcs) ; be silent, byte-compiler

(after! rmcs-cli-ci
  ;;; Commit linter types
  (add-to-list 'rmcs-ci-commit-types 'module)
  (add-to-list 'rmcs-ci-commit-scopeless-types 'module)

  ;;; Commit linter scopes
  (add-to-list 'rmcs-ci-commit-scopes "cli")
  (add-to-list 'rmcs-ci-commit-scopes "lib")
  (add-to-list 'rmcs-ci-commit-scopes "docs")
  (add-to-list 'rmcs-ci-commit-scopes '(docs "install" ci-check-docs-scope))
  (add-to-list 'rmcs-ci-commit-scopes #'ci-check-module-scope)
  ;; DEPRECATED Will be removed once modules live in their own repo
  (add-to-list 'rmcs-ci-commit-scopes '(release "modules")))

(after! rmcs-cli-make
  ;;; Codeowners
  (dolist (path (rmcs-module-load-path (list rmcs-modules-dir)))
    ;; I will be the default owner for everything in the repo unless a later
    ;; match takes precedence.
    (add-to-list 'rmcs-make-codeowners "# The default owner(s) unless another takes precedence")
    (add-to-list 'rmcs-make-codeowners '("*" . "@rmcsemacs/maintainers"))
    ;; Module maintainers (see https://git.rmcsemacs.org/teams)
    (save-match-data
      (add-to-list 'rmcs-make-codeowners "# Module maintainers")
      (when (string-match "/modules/\\([^/]+\\)/\\([^/]+\\)/$" path)
        (push (cons (substring (match-string 0 path) 1)
                    (format "@rmcsemacs/%s-%s"
                            (match-string 1 path)
                            (match-string 2 path)))
              rmcs-make-codeowners)))))

;;; Helpers
(defun ci-check-module-scope (scope _plist)
  "Only allow :CATEGORY or MODULE scopes if they actually exist."
  (rmcs-glob (dir!) "modules" (if (string-prefix-p ":" scope)
                                  (format "%s" (substring scope 1))
                                (format "*/%s" scope))))

(defun ci-check-docs-scope (scope _plist)
  "Allow any filename in docs/* as a scope for docs commits."
  (member
   scope (rmcs-files-in (rmcs-path (dir!) "../docs")
                        :match "\\.org$"
                        :map #'file-name-base)))

;;; .rmcsrc ends here
